server {
    listen 80;
    listen [::]:80;
    return 301 https://$host$request_uri;
}

upstream coder-app {
  server host.docker.internal:8080;
}
upstream dev-app {
  server  host.docker.internal:8081;
}
server {

    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ${NGINX_HOST};

    # This tells Nginx what CA to verify against
    ssl_client_certificate    /etc/nginx/certs/rootCA.pem;

    # This tells Nginx to verify clients
    #ssl_verify_depth 2;
    #ssl_verify_client on;

    ssl_certificate           /etc/nginx/certs/${NGINX_HOST}.pem;
    ssl_certificate_key       /etc/nginx/certs/${NGINX_HOST}-key.pem;
    #ssl_protocols            SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    #ssl_ciphers              HIGH:!aNULL:!MD5;
    #ssl_session_cache        shared:SSL:20m;
    #ssl_session_timeout      4h;
    #ssl_handshake_timeout    30s;    

    location / {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;
      proxy_set_header        Upgrade $http_upgrade;
      proxy_set_header        Connection upgrade;
      proxy_set_header        Accept-Encoding gzip;
      proxy_pass              http://coder-app;
      #proxy_redirect         http://coder_server:8443 https://your_domain_name;
      proxy_read_timeout      90;
    }
    location /dev {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;
      proxy_set_header        Upgrade $http_upgrade;
      proxy_set_header        Connection upgrade;
      proxy_set_header        Accept-Encoding gzip;
      proxy_pass              http://dev-app;
      #proxy_redirect         http://coder_server:8443 https://your_domain_name;
      proxy_read_timeout      90;
    }
  }
