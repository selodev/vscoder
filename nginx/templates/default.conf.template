server {
  listen 80 default_server;
  listen [::]:80 default_server;
  server_name ${NGINX_HOST};

  location ~ /.well-known/acme-challenge {
    allow all;
    root /var/www/html;
  }

  location / {
    return 301 https://${NGINX_HOST}$request_uri;
  }
}

upstream coder-app {
  server coder:8080;
  # server host.docker.internal:8080;
}

server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name ${NGINX_HOST} ;

  if ($host != ${NGINX_HOST}) {
    return 301 https://${NGINX_HOST}$request_uri;
  }
  
  ssl_certificate /etc/letsencrypt/live/${NGINX_HOST}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/${NGINX_HOST}/privkey.pem;

  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;

  # Security headers
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-XSS-Protection "1; mode=block" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header Referrer-Policy "no-referrer-when-downgrade" always;
  add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

  # HSTS (ngx_http_headers_module is required) (63072000 seconds)
  # Be aware that once you set the STS header or submit your domains to the HSTS preload list, it is impossible to remove it. It’s a one‑way decision to make your domains available over HTTPS.
  add_header Strict-Transport-Security "max-age=63072000 includeSubDomains" always;

  # OCSP stapling
  ssl_stapling on;
  ssl_stapling_verify on;

  # verify chain of trust of OCSP response using Root CA and Intermediate certs
  ssl_trusted_certificate /etc/letsencrypt/live/${NGINX_HOST}/chain.pem;

  # replace with the IP address of your resolver
  resolver 8.8.8.8;

  location / {
    proxy_set_header        Host $host;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto $scheme;
    proxy_set_header        Upgrade $http_upgrade;
    proxy_set_header        Connection upgrade;
    proxy_set_header        Accept-Encoding gzip;
    proxy_pass              http://coder-app;
    #proxy_redirect          http://coder-app https://${NGINX_HOST};
    proxy_read_timeout      90;
  }

  root /var/www/html;
  index index.html;
}
